{"name":"Lexeme","tagline":"A simple lexical analyzer written in Ruby","body":"Lexeme\r\n======\r\nA simple lexical analyzer for programming and human languages.\r\n\r\n[![Build Status](https://travis-ci.org/mancmelou/lexeme.png)](https://travis-ci.org/mancmelou/lexeme) [![Gem Version](https://badge.fury.io/rb/lexeme.png)](http://badge.fury.io/rb/lexeme)\r\n\r\nInstall\r\n-------\r\nThere are two easy ways to get `lexeme` on your box. You can either download the source or install the ruby gem. \r\n\r\n    gem install lexeme\r\n    \r\nUsage\r\n-----\r\nJust look under the `example` directory for a quick example on how the library can be used to efficiently \r\ntokenize mathematical expressions such is `1 + 3 - sin(0)/cos(1) * pow(6)`. However, since tokenizing \r\nmathematical expressions may not be sufficient for a modern day programming language, another good example\r\ncould be a demonstration of the ability to tokenize pseudo code.\r\n\r\nLet's say we have a source code of some pseudo program and we save it in a file named `pseudo-code.src`:\r\n\r\n    func hello_world\r\n      x = 1\r\n      y = x + 2\r\n      print \"Hello\"\r\n    fin\r\n\r\nSince we can see that there's a couple of lexemes used in this language we will define them as part \r\nof the lexer's operative ruleset. To keep things as simple as possible, I'll place\r\nthe language definition and the lexical analyzer call in the same code base. \r\nIdeally, language definition would be something you want to write and include separately. \r\n\r\nOur ruby code should look like this:\r\n\r\n```ruby\r\nrequire 'lexeme'\r\n\r\nlexer = Lexeme.define do\r\n  token :EQ       => /^=$/\r\n  token :PLUS     => /^\\+$/\r\n  token :MINUS    => /^\\-$/\r\n  token :MULTI    => /^\\*$/\r\n  token :DIV      => /^\\/$/\r\n  token :NUMBER   => /^\\d+\\.?\\d?$/\r\n  token :RESERVED => /^(fin|print|func|)$/\r\n  token :STRING   => /^\".*\"$/\r\n  token :ID       => /^[\\w_\"]+$/ \r\nend\r\n\r\ntokens = lexer.analyze do \r\n  from_file 'pseudo-code.src'\r\nend\r\n\r\ntokens.each do |t|\r\n  puts \"#{t.line} => #{t.name}: #{t.value}\"\r\nend\r\n```\r\n\r\nOnce ran, the code above should output (line => token_id: token_value):\r\n\r\n    1 => RESERVED: func\r\n    1 => ID: hello_world\r\n    2 => ID: x\r\n    2 => EQ: =\r\n    2 => NUMBER: 1\r\n    3 => ID: y\r\n    3 => EQ: =\r\n    3 => ID: x\r\n    3 => PLUS: +\r\n    3 => NUMBER: 2\r\n    4 => RESERVED: print\r\n    4 => STRING: \"Hello\"\r\n    5 => RESERVED: fin\r\n\r\nNatural languages\r\n-----------------\r\nLexeme can also be used for natral language processing. Here's a quick example on how to do it.\r\n\r\n```ruby\r\nrequire 'lexeme'\r\n\r\nputs \"Greetings from Los Angeles!!\".tokenize\r\n```\r\n\r\nRunning this code will produce:\r\n\r\n    [WORD: Greetings, WORD: from, WORD: Los, WORD: Angeles, EXCL: !, EXCL: !]\r\n\r\nA more advanced example with a customized syntatical rules would be something like this:\r\n\r\n```ruby\r\nrequire 'lexeme'\r\n\r\nlexer = Lexeme.define do\r\n  token :STOP     =>   /^\\.$/\r\n  token :COMA     =>   /^,$/\r\n  token :QUES     =>   /^\\?$/\r\n  token :EXCLAM   =>   /^!$/\r\n  token :QUOT     =>   /^\"$/\r\n  token :APOS     =>   /^'$/\r\n  token :WORD     =>   /^[\\w\\-]+$/\r\nend \r\n\r\ntokens = lexer.analyze do\r\n  from_string 'Hello! My name is Inigo Montoya. You killed my father. Prepare to die.'\r\nend\r\n\r\ntokens.each do |t|\r\n  puts \"#{t.name}: #{t.value}\"\r\nend\r\n```\r\n\r\nWill output: \r\n\r\n    WORD: Hello\r\n    EXCLAM: !\r\n    WORD: My\r\n    WORD: name\r\n    WORD: is\r\n    WORD: Inigo\r\n    WORD: Montoya\r\n    STOP: .\r\n    WORD: You\r\n    WORD: killed\r\n    WORD: my\r\n    WORD: father\r\n    STOP: .\r\n    WORD: Prepare\r\n    WORD: to\r\n    WORD: die\r\n    STOP: .\r\n\r\nChange log\r\n----------\r\nVersion 0.0.5\r\n- Added line number to each token object. Useful for hinting errors to the user (thanks Rick).\r\n    \r\n    ```ruby \r\n    tokens.each do |token|\r\n      puts \"#{token.line} => #{token.name}: #{token.value}\"\r\n    end\r\n    ```\r\n\r\nContributing\r\n------------\r\nAny help on this project is very welcome. Please feel free to fork, modify and \r\nmake pull requests. Also make sure you check the TODO file when the file is present in the repository. \r\n\r\nAuthor\r\n------\r\nLexeme was written by Vladimir Ivic (vladimir.ivic at icloud.com) and is\r\nreleased under the MIT license.\r\n\r\nThe MIT License (MIT)\r\n---------------------\r\nCopyright (c) 2014 Vladimir Ivic\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}